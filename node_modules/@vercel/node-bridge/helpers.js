module.exports =
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 371:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createServerWithHelpers = exports.sendError = exports.ApiError = void 0;
const http_1 = __webpack_require__(605);
function getBodyParser(req, body) {
    return function parseBody() {
        if (!req.headers['content-type']) {
            return undefined;
        }
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        const { parse: parseContentType } = __webpack_require__(909);
        const { type } = parseContentType(req.headers['content-type']);
        if (type === 'application/json') {
            try {
                const str = body.toString();
                return str ? JSON.parse(str) : {};
            }
            catch (error) {
                throw new ApiError(400, 'Invalid JSON');
            }
        }
        if (type === 'application/octet-stream') {
            return body;
        }
        if (type === 'application/x-www-form-urlencoded') {
            // eslint-disable-next-line @typescript-eslint/no-var-requires
            const { parse: parseQS } = __webpack_require__(191);
            // note: querystring.parse does not produce an iterable object
            // https://nodejs.org/api/querystring.html#querystring_querystring_parse_str_sep_eq_options
            return parseQS(body.toString());
        }
        if (type === 'text/plain') {
            return body.toString();
        }
        return undefined;
    };
}
function getQueryParser({ url = '/' }) {
    return function parseQuery() {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        const { parse: parseURL } = __webpack_require__(835);
        return parseURL(url, true).query;
    };
}
function getCookieParser(req) {
    return function parseCookie() {
        const header = req.headers.cookie;
        if (!header) {
            return {};
        }
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        const { parse } = __webpack_require__(40);
        return parse(Array.isArray(header) ? header.join(';') : header);
    };
}
function status(res, statusCode) {
    res.statusCode = statusCode;
    return res;
}
function redirect(res, statusOrUrl, url) {
    if (typeof statusOrUrl === 'string') {
        url = statusOrUrl;
        statusOrUrl = 307;
    }
    if (typeof statusOrUrl !== 'number' || typeof url !== 'string') {
        throw new Error(`Invalid redirect arguments. Please use a single argument URL, e.g. res.redirect('/destination') or use a status code and URL, e.g. res.redirect(307, '/destination').`);
    }
    res.writeHead(statusOrUrl, { Location: url }).end();
    return res;
}
function setCharset(type, charset) {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const { parse, format } = __webpack_require__(909);
    const parsed = parse(type);
    parsed.parameters.charset = charset;
    return format(parsed);
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function createETag(body, encoding) {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const etag = __webpack_require__(737);
    const buf = !Buffer.isBuffer(body) ? Buffer.from(body, encoding) : body;
    return etag(buf, { weak: true });
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function send(req, res, body) {
    let chunk = body;
    let encoding;
    switch (typeof chunk) {
        // string defaulting to html
        case 'string':
            if (!res.getHeader('content-type')) {
                res.setHeader('content-type', 'text/html');
            }
            break;
        case 'boolean':
        case 'number':
        case 'object':
            if (chunk === null) {
                chunk = '';
            }
            else if (Buffer.isBuffer(chunk)) {
                if (!res.getHeader('content-type')) {
                    res.setHeader('content-type', 'application/octet-stream');
                }
            }
            else {
                return json(req, res, chunk);
            }
            break;
    }
    // write strings in utf-8
    if (typeof chunk === 'string') {
        encoding = 'utf8';
        // reflect this in content-type
        const type = res.getHeader('content-type');
        if (typeof type === 'string') {
            res.setHeader('content-type', setCharset(type, 'utf-8'));
        }
    }
    // populate Content-Length
    let len;
    if (chunk !== undefined) {
        if (Buffer.isBuffer(chunk)) {
            // get length of Buffer
            len = chunk.length;
        }
        else if (typeof chunk === 'string') {
            if (chunk.length < 1000) {
                // just calculate length small chunk
                len = Buffer.byteLength(chunk, encoding);
            }
            else {
                // convert chunk to Buffer and calculate
                const buf = Buffer.from(chunk, encoding);
                len = buf.length;
                chunk = buf;
                encoding = undefined;
            }
        }
        else {
            throw new Error('`body` is not a valid string, object, boolean, number, Stream, or Buffer');
        }
        if (len !== undefined) {
            res.setHeader('content-length', len);
        }
    }
    // populate ETag
    let etag;
    if (!res.getHeader('etag') &&
        len !== undefined &&
        (etag = createETag(chunk, encoding))) {
        res.setHeader('etag', etag);
    }
    // strip irrelevant headers
    if (204 === res.statusCode || 304 === res.statusCode) {
        res.removeHeader('Content-Type');
        res.removeHeader('Content-Length');
        res.removeHeader('Transfer-Encoding');
        chunk = '';
    }
    if (req.method === 'HEAD') {
        // skip body for HEAD
        res.end();
    }
    else if (encoding) {
        // respond with encoding
        res.end(chunk, encoding);
    }
    else {
        // respond without encoding
        res.end(chunk);
    }
    return res;
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function json(req, res, jsonBody) {
    const body = JSON.stringify(jsonBody);
    // content-type
    if (!res.getHeader('content-type')) {
        res.setHeader('content-type', 'application/json; charset=utf-8');
    }
    return send(req, res, body);
}
class ApiError extends Error {
    constructor(statusCode, message) {
        super(message);
        this.statusCode = statusCode;
    }
}
exports.ApiError = ApiError;
function sendError(res, statusCode, message) {
    res.statusCode = statusCode;
    res.statusMessage = message;
    res.end();
}
exports.sendError = sendError;
function setLazyProp(req, prop, getter) {
    const opts = { configurable: true, enumerable: true };
    const optsReset = { ...opts, writable: true };
    Object.defineProperty(req, prop, {
        ...opts,
        get: () => {
            const value = getter();
            // we set the property on the object to avoid recalculating it
            Object.defineProperty(req, prop, { ...optsReset, value });
            return value;
        },
        set: value => {
            Object.defineProperty(req, prop, { ...optsReset, value });
        },
    });
}
function createServerWithHelpers(handler, bridge) {
    const server = new http_1.Server(async (_req, _res) => {
        const req = _req;
        const res = _res;
        try {
            const reqId = req.headers['x-now-bridge-request-id'];
            // don't expose this header to the client
            delete req.headers['x-now-bridge-request-id'];
            if (typeof reqId !== 'string') {
                throw new ApiError(500, 'Internal Server Error');
            }
            const event = bridge.consumeEvent(reqId);
            setLazyProp(req, 'cookies', getCookieParser(req));
            setLazyProp(req, 'query', getQueryParser(req));
            setLazyProp(req, 'body', getBodyParser(req, event.body));
            res.status = statusCode => status(res, statusCode);
            res.redirect = (statusOrUrl, url) => redirect(res, statusOrUrl, url);
            res.send = body => send(req, res, body);
            res.json = jsonBody => json(req, res, jsonBody);
            await handler(req, res);
        }
        catch (err) {
            if (err instanceof ApiError) {
                sendError(res, err.statusCode, err.message);
            }
            else {
                throw err;
            }
        }
    });
    return server;
}
exports.createServerWithHelpers = createServerWithHelpers;


/***/ }),

/***/ 909:
/***/ ((module) => {

module.exports = eval("require")("content-type");


/***/ }),

/***/ 40:
/***/ ((module) => {

module.exports = eval("require")("cookie");


/***/ }),

/***/ 737:
/***/ ((module) => {

module.exports = eval("require")("etag");


/***/ }),

/***/ 605:
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ 191:
/***/ ((module) => {

"use strict";
module.exports = require("querystring");

/***/ }),

/***/ 835:
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete __webpack_module_cache__[moduleId];
/******/ 		}
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat */
/******/ 	
/******/ 	__webpack_require__.ab = __dirname + "/";/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(371);
/******/ })()
;